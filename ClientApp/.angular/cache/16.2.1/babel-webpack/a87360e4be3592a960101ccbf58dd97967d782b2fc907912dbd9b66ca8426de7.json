{"ast":null,"code":"var _class;\nimport { mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authorize.service\";\nexport class AuthorizeInterceptor {\n  constructor(authorize) {\n    this.authorize = authorize;\n  }\n  intercept(req, next) {\n    return this.authorize.getAccessToken().pipe(mergeMap(token => this.processRequestWithToken(token, req, next)));\n  }\n  // Checks if there is an access_token available in the authorize service\n  // and adds it to the request in case it's targeted at the same origin as the\n  // single page application.\n  processRequestWithToken(token, req, next) {\n    if (!!token && this.isSameOriginUrl(req)) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n  isSameOriginUrl(req) {\n    // It's an absolute url with the same origin.\n    if (req.url.startsWith(`${window.location.origin}/`)) {\n      return true;\n    }\n    // It's a protocol relative url with the same origin.\n    // For example: //www.example.com/api/Products\n    if (req.url.startsWith(`//${window.location.host}/`)) {\n      return true;\n    }\n    // It's a relative url like /api/Products\n    if (/^\\/[^\\/].*/.test(req.url)) {\n      return true;\n    }\n    // It's an absolute or protocol relative url that\n    // doesn't have the same origin.\n    return false;\n  }\n}\n_class = AuthorizeInterceptor;\n_class.ɵfac = function AuthorizeInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthorizeService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["mergeMap","AuthorizeInterceptor","constructor","authorize","intercept","req","next","getAccessToken","pipe","token","processRequestWithToken","isSameOriginUrl","clone","setHeaders","Authorization","handle","url","startsWith","window","location","origin","host","test","i0","ɵɵinject","i1","AuthorizeService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\api-authorization\\authorize.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthorizeService } from './authorize.service';\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizeInterceptor implements HttpInterceptor {\r\n  constructor(private authorize: AuthorizeService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return this.authorize.getAccessToken()\r\n      .pipe(mergeMap(token => this.processRequestWithToken(token, req, next)));\r\n  }\r\n\r\n  // Checks if there is an access_token available in the authorize service\r\n  // and adds it to the request in case it's targeted at the same origin as the\r\n  // single page application.\r\n  private processRequestWithToken(token: string | null, req: HttpRequest<any>, next: HttpHandler) {\r\n    if (!!token && this.isSameOriginUrl(req)) {\r\n      req = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n    }\r\n\r\n    return next.handle(req);\r\n  }\r\n\r\n  private isSameOriginUrl(req: any) {\r\n    // It's an absolute url with the same origin.\r\n    if (req.url.startsWith(`${window.location.origin}/`)) {\r\n      return true;\r\n    }\r\n\r\n    // It's a protocol relative url with the same origin.\r\n    // For example: //www.example.com/api/Products\r\n    if (req.url.startsWith(`//${window.location.host}/`)) {\r\n      return true;\r\n    }\r\n\r\n    // It's a relative url like /api/Products\r\n    if (/^\\/[^\\/].*/.test(req.url)) {\r\n      return true;\r\n    }\r\n\r\n    // It's an absolute or protocol relative url that\r\n    // doesn't have the same origin.\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":";AAIA,SAASA,QAAQ,QAAQ,gBAAgB;;;AAKzC,OAAM,MAAOC,oBAAoB;EAC/BC,YAAoBC,SAA2B;IAA3B,KAAAA,SAAS,GAATA,SAAS;EAAsB;EAEnDC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAO,IAAI,CAACH,SAAS,CAACI,cAAc,EAAE,CACnCC,IAAI,CAACR,QAAQ,CAACS,KAAK,IAAI,IAAI,CAACC,uBAAuB,CAACD,KAAK,EAAEJ,GAAG,EAAEC,IAAI,CAAC,CAAC,CAAC;EAC5E;EAEA;EACA;EACA;EACQI,uBAAuBA,CAACD,KAAoB,EAAEJ,GAAqB,EAAEC,IAAiB;IAC5F,IAAI,CAAC,CAACG,KAAK,IAAI,IAAI,CAACE,eAAe,CAACN,GAAG,CAAC,EAAE;MACxCA,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC;QACdC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;;IAGJ,OAAOH,IAAI,CAACS,MAAM,CAACV,GAAG,CAAC;EACzB;EAEQM,eAAeA,CAACN,GAAQ;IAC9B;IACA,IAAIA,GAAG,CAACW,GAAG,CAACC,UAAU,CAAC,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACpD,OAAO,IAAI;;IAGb;IACA;IACA,IAAIf,GAAG,CAACW,GAAG,CAACC,UAAU,CAAC,KAAKC,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG,CAAC,EAAE;MACpD,OAAO,IAAI;;IAGb;IACA,IAAI,YAAY,CAACC,IAAI,CAACjB,GAAG,CAACW,GAAG,CAAC,EAAE;MAC9B,OAAO,IAAI;;IAGb;IACA;IACA,OAAO,KAAK;EACd;;SA3CWf,oBAAoB;;mBAApBA,MAAoB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;AAAA;;SAApBzB,MAAoB;EAAA0B,OAAA,EAApB1B,MAAoB,CAAA2B,IAAA;EAAAC,UAAA,EAFnB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}