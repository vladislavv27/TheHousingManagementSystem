{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HomesApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7281/api';\n  }\n  getAllHouses(accessToken) {\n    return this.http.get(`${this.apiUrl}/houses`);\n  }\n  getHouseById(id) {\n    return this.http.get(`${this.apiUrl}/houses/${id}`);\n  }\n  getAllApartments() {\n    return this.http.get(`${this.apiUrl}/apartments`);\n  }\n  GetHouseApartments(houseId) {\n    return this.http.get(`${this.apiUrl}/houses/${houseId}/apartments`);\n  }\n  UpdateHouse(id, house) {\n    return this.http.put(`${this.apiUrl}/houses/${id}`, house);\n  }\n  UpdateApartment(id, apartment) {\n    return this.http.put(`${this.apiUrl}/apartments/${id}`, apartment);\n  }\n  GetApartmentById(id) {\n    return this.http.get(`${this.apiUrl}/apartments/${id}`);\n  }\n  GetApartmentsResident(apartmentId) {\n    return this.http.get(`${this.apiUrl}/apartments/${apartmentId}/residents`);\n  }\n  DeleteHouse(id) {\n    return this.http.delete(`${this.apiUrl}/houses/${id}`);\n  }\n  DeleteApartment(id) {\n    return this.http.delete(`${this.apiUrl}/apartments/${id}`);\n  }\n  CreateApartment(apartmentcreate) {\n    apartmentcreate.id = 0;\n    return this.http.post(this.apiUrl + '/apartments', apartmentcreate);\n  }\n  CreateHouse(housecreate) {\n    housecreate.id = 0;\n    return this.http.post(this.apiUrl + '/houses', housecreate);\n  }\n  GetResidentById(id) {\n    return this.http.get(`${this.apiUrl}/residents/${id}`);\n  }\n  //check\n  deleteResident(id, jwtToken) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${jwtToken}`);\n    return this.http.delete(`${this.apiUrl}/residents/${id}`, {\n      headers\n    });\n  }\n  UpdateResident(idToUpdate, resident, jwtToken) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${jwtToken}`);\n    return this.http.put(`${this.apiUrl}/residents/${idToUpdate}`, resident, {\n      headers\n    });\n  }\n  CreateResident(residentcreate, jtw) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${jtw}`);\n    return this.http.post(this.apiUrl + '/residents', residentcreate, {\n      headers\n    });\n  }\n  doesHouseExistByNumber(houseNumber) {\n    return this.getAllHouses().pipe(map(houses => houses.some(house => house.number === houseNumber)));\n  }\n  doesApartmentExistByNumber(apartmentNumber, houseId) {\n    return this.GetHouseApartments(houseId).pipe(map(apartment => apartment.some(apartment => apartment.number === apartmentNumber)));\n  }\n  doesResidentExistByNumber(personalcode, apartmentNumber) {\n    return this.GetApartmentsResident(apartmentNumber).pipe(map(resdident => resdident.some(resdident => resdident.personalCode === personalcode)));\n  }\n}\n_class = HomesApiService;\n_class.ɵfac = function HomesApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","map","HomesApiService","constructor","http","apiUrl","getAllHouses","accessToken","get","getHouseById","id","getAllApartments","GetHouseApartments","houseId","UpdateHouse","house","put","UpdateApartment","apartment","GetApartmentById","GetApartmentsResident","apartmentId","DeleteHouse","delete","DeleteApartment","CreateApartment","apartmentcreate","post","CreateHouse","housecreate","GetResidentById","deleteResident","jwtToken","headers","set","UpdateResident","idToUpdate","resident","CreateResident","residentcreate","jtw","doesHouseExistByNumber","houseNumber","pipe","houses","some","number","doesApartmentExistByNumber","apartmentNumber","doesResidentExistByNumber","personalcode","resdident","personalCode","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\app\\Services\\homes-api.service.ts"],"sourcesContent":["import { Resident } from './../Models/resident.model';\nimport { Apartment } from './../Models/apartment.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map, tap } from 'rxjs';\nimport { House } from '../Models/house.model';\n@Injectable({\n  providedIn: 'root', // Or specify a module if needed\n})\nexport class HomesApiService {\n\n   private apiUrl= 'https://localhost:7281/api'\n  AuthorizeService: any;\n\n\n  constructor(private http: HttpClient) {}\n\n\n  getAllHouses(accessToken:string): Observable<House[]> {\n    return this.http.get<House[]>(`${this.apiUrl}/houses`);\n  }\n  getHouseById(id: number): Observable<House> {\n    return this.http.get<House>(`${this.apiUrl}/houses/${id}`);\n  }\n  getAllApartments(): Observable<Apartment[]> {\n\n    return this.http.get<Apartment[]>(`${this.apiUrl}/apartments`);\n  }\n  \n  GetHouseApartments(houseId: number): Observable<Apartment[]> {\n    return this.http.get<Apartment[]>(`${this.apiUrl}/houses/${houseId}/apartments`);\n  }\n  UpdateHouse(id: number, house: House): Observable<any> {\n    return this.http.put(`${this.apiUrl}/houses/${id}`, house);\n  }\n  UpdateApartment(id: number, apartment: Apartment): Observable<any> {\n    return this.http.put(`${this.apiUrl}/apartments/${id}`, apartment);\n  }\n  GetApartmentById(id: number):Observable<Apartment>{\n    return this.http.get<Apartment>(`${this.apiUrl}/apartments/${id}`);\n\n  }\n  GetApartmentsResident(apartmentId:number):Observable<Resident[]>{\n    return this.http.get<Resident[]>(`${this.apiUrl}/apartments/${apartmentId}/residents`);\n  }\n  DeleteHouse(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/houses/${id}`);\n  }\n  DeleteApartment(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/apartments/${id}`);\n  }\n  CreateApartment(apartmentcreate: Apartment):Observable<Apartment>{\n    apartmentcreate.id=0;\n    return this.http.post<Apartment>(this.apiUrl+'/apartments',apartmentcreate);\n  }\n  CreateHouse(housecreate: House):Observable<House>{\n    housecreate.id=0;\n    return this.http.post<House>(this.apiUrl+'/houses',housecreate);\n  }\n  GetResidentById(id: number): Observable<Resident> {\n    return this.http.get<Resident>(`${this.apiUrl}/residents/${id}`);\n  }\n  //check\n  deleteResident(id: number, jwtToken: string): Observable<any> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${jwtToken}`);\n    return this.http.delete(`${this.apiUrl}/residents/${id}`, { headers });\n  }\n  \n  UpdateResident(idToUpdate: number, resident: Resident,jwtToken:String): Observable<any> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${jwtToken}`);\n\n    \n   return this.http.put(`${this.apiUrl}/residents/${idToUpdate}`,resident,{headers});\n}\n\n  CreateResident(residentcreate: Resident,jtw:String):Observable<Resident>{\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${jtw}`);\n\n    return this.http.post<Resident>(this.apiUrl+'/residents',residentcreate,{headers});\n  }\n  doesHouseExistByNumber(houseNumber: number): Observable<boolean> {\n    return this.getAllHouses().pipe(map((houses) => houses.some((house) => house.number === houseNumber))\n    );\n  }\n  doesApartmentExistByNumber(apartmentNumber: number,houseId:number): Observable<boolean> {\n    return this.GetHouseApartments(houseId).pipe(map((apartment) => apartment.some((apartment) => apartment.number === apartmentNumber))\n    );\n  }\n  doesResidentExistByNumber(personalcode: string,apartmentNumber:number): Observable<boolean> {\n    return this.GetApartmentsResident(apartmentNumber).pipe(map((resdident) => resdident.some((resdident) => resdident.personalCode === personalcode))\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}