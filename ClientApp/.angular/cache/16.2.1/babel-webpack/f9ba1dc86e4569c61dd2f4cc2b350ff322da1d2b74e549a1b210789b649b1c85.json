{"ast":null,"code":"var _class;\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HomesApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7281/api';\n  }\n  sendTokenToApi(jwtToken) {\n    // Define the HTTP headers with the token\n    const role = jwtToken.role;\n    const id = jwtToken.id; // Update this to match the property name in your request\n    // Create the request body\n    const requestBody = {\n      role: role,\n      id: id\n    };\n    const apiUrl = 'https://localhost:7281/api/residents/profile'; // Replace with your API URL\n    return this.http.post(apiUrl, requestBody);\n  }\n  getAllHouses() {\n    return this.http.get(`${this.apiUrl}/houses`);\n  }\n  getHouseById(id) {\n    return this.http.get(`${this.apiUrl}/houses/${id}`);\n  }\n  getAllApartments() {\n    return this.http.get(`${this.apiUrl}/apartments`);\n  }\n  GetHouseApartments(houseId) {\n    return this.http.get(`${this.apiUrl}/houses/${houseId}/apartments`);\n  }\n  UpdateHouse(id, house) {\n    return this.http.put(`${this.apiUrl}/houses/${id}`, house);\n  }\n  UpdateApartment(id, apartment) {\n    return this.http.put(`${this.apiUrl}/apartments/${id}`, apartment);\n  }\n  GetApartmentById(id) {\n    return this.http.get(`${this.apiUrl}/apartments/${id}`);\n  }\n  GetApartmentsResident(apartmentId) {\n    return this.http.get(`${this.apiUrl}/apartments/${apartmentId}/residents`);\n  }\n  DeleteHouse(id) {\n    return this.http.delete(`${this.apiUrl}/houses/${id}`);\n  }\n  DeleteApartment(id) {\n    return this.http.delete(`${this.apiUrl}/apartments/${id}`);\n  }\n  CreateApartment(apartmentcreate) {\n    apartmentcreate.id = 0;\n    return this.http.post(this.apiUrl + '/apartments', apartmentcreate);\n  }\n  CreateHouse(housecreate) {\n    housecreate.id = 0;\n    return this.http.post(this.apiUrl + '/houses', housecreate);\n  }\n  GetResidentById(id) {\n    return this.http.get(`${this.apiUrl}/residents/${id}`);\n  }\n  DeleteResident(id) {\n    return this.http.delete(`${this.apiUrl}/residents/${id}`);\n  }\n  UpdateResident(id, resident) {\n    return this.http.put(`${this.apiUrl}/residents/${id}`, resident);\n  }\n  CreateResident(residentcreate) {\n    residentcreate.id = 0;\n    return this.http.post(this.apiUrl + '/residents', residentcreate);\n  }\n  doesHouseExistByNumber(houseNumber) {\n    return this.getAllHouses().pipe(map(houses => houses.some(house => house.number === houseNumber)));\n  }\n  doesApartmentExistByNumber(apartmentNumber, houseId) {\n    return this.GetHouseApartments(houseId).pipe(map(apartment => apartment.some(apartment => apartment.number === apartmentNumber)));\n  }\n  doesResidentExistByNumber(personalcode, apartmentNumber) {\n    return this.GetApartmentsResident(apartmentNumber).pipe(map(resdident => resdident.some(resdident => resdident.personalCode === personalcode)));\n  }\n}\n_class = HomesApiService;\n_class.ɵfac = function HomesApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","HomesApiService","constructor","http","apiUrl","sendTokenToApi","jwtToken","role","id","requestBody","post","getAllHouses","get","getHouseById","getAllApartments","GetHouseApartments","houseId","UpdateHouse","house","put","UpdateApartment","apartment","GetApartmentById","GetApartmentsResident","apartmentId","DeleteHouse","delete","DeleteApartment","CreateApartment","apartmentcreate","CreateHouse","housecreate","GetResidentById","DeleteResident","UpdateResident","resident","CreateResident","residentcreate","doesHouseExistByNumber","houseNumber","pipe","houses","some","number","doesApartmentExistByNumber","apartmentNumber","doesResidentExistByNumber","personalcode","resdident","personalCode","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\app\\Services\\homes-api.service.ts"],"sourcesContent":["import { Resident } from './../Models/resident.model';\nimport { Apartment } from './../Models/apartment.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map, tap } from 'rxjs';\nimport { House } from '../Models/house.model';\n@Injectable({\n  providedIn: 'root', // Or specify a module if needed\n})\nexport class HomesApiService {\n\n   private apiUrl= 'https://localhost:7281/api'\n  AuthorizeService: any;\n\n  constructor(private http: HttpClient) {}\n\n  sendTokenToApi(jwtToken: any) {\n    // Define the HTTP headers with the token\n    const role = jwtToken.role;\n    const id = jwtToken.id; // Update this to match the property name in your request\n  \n    // Create the request body\n    const requestBody = {\n      role: role,\n      id: id\n    };\n  \n    const apiUrl = 'https://localhost:7281/api/residents/profile'; // Replace with your API URL\n    return this.http.post(apiUrl, requestBody);\n  }\n  getAllHouses(): Observable<House[]> {\n    return this.http.get<House[]>(`${this.apiUrl}/houses`);\n  }\n  getHouseById(id: number): Observable<House> {\n    return this.http.get<House>(`${this.apiUrl}/houses/${id}`);\n  }\n  getAllApartments(): Observable<Apartment[]> {\n    return this.http.get<Apartment[]>(`${this.apiUrl}/apartments`);\n  }\n  \n  GetHouseApartments(houseId: number): Observable<Apartment[]> {\n    return this.http.get<Apartment[]>(`${this.apiUrl}/houses/${houseId}/apartments`);\n  }\n  UpdateHouse(id: number, house: House): Observable<any> {\n    return this.http.put(`${this.apiUrl}/houses/${id}`, house);\n  }\n  UpdateApartment(id: number, apartment: Apartment): Observable<any> {\n    return this.http.put(`${this.apiUrl}/apartments/${id}`, apartment);\n  }\n  GetApartmentById(id: number):Observable<Apartment>{\n    return this.http.get<Apartment>(`${this.apiUrl}/apartments/${id}`);\n\n  }\n  GetApartmentsResident(apartmentId:number):Observable<Resident[]>{\n    return this.http.get<Resident[]>(`${this.apiUrl}/apartments/${apartmentId}/residents`);\n  }\n  DeleteHouse(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/houses/${id}`);\n  }\n  DeleteApartment(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/apartments/${id}`);\n  }\n  CreateApartment(apartmentcreate: Apartment):Observable<Apartment>{\n    apartmentcreate.id=0;\n    return this.http.post<Apartment>(this.apiUrl+'/apartments',apartmentcreate);\n  }\n  CreateHouse(housecreate: House):Observable<House>{\n    housecreate.id=0;\n    return this.http.post<House>(this.apiUrl+'/houses',housecreate);\n  }\n  GetResidentById(id: number): Observable<Resident> {\n    return this.http.get<Resident>(`${this.apiUrl}/residents/${id}`);\n  }\n  DeleteResident(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/residents/${id}`);\n  }\n  UpdateResident(id: number, resident: Resident): Observable<any> {\n    return this.http.put(`${this.apiUrl}/residents/${id}`, resident);\n  }\n  CreateResident(residentcreate: Resident):Observable<Resident>{\n    residentcreate.id=0;\n    return this.http.post<Resident>(this.apiUrl+'/residents',residentcreate);\n  }\n  doesHouseExistByNumber(houseNumber: number): Observable<boolean> {\n    return this.getAllHouses().pipe(map((houses) => houses.some((house) => house.number === houseNumber))\n    );\n  }\n  doesApartmentExistByNumber(apartmentNumber: number,houseId:number): Observable<boolean> {\n    return this.GetHouseApartments(houseId).pipe(map((apartment) => apartment.some((apartment) => apartment.number === apartmentNumber))\n    );\n  }\n  doesResidentExistByNumber(personalcode: string,apartmentNumber:number): Observable<boolean> {\n    return this.GetApartmentsResident(apartmentNumber).pipe(map((resdident) => resdident.some((resdident) => resdident.personalCode === personalcode))\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}