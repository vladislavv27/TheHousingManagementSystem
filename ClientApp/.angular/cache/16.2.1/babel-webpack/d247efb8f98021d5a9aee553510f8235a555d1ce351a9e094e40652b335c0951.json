{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/VladislavMihailov/source/repos/tets/VmihailovUi/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { UserManager } from 'oidc-client';\nimport { BehaviorSubject, concat, from } from 'rxjs';\nimport { filter, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { ApplicationPaths, ApplicationName } from './api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nexport var AuthenticationResultStatus;\n(function (AuthenticationResultStatus) {\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Success\"] = 0] = \"Success\";\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Redirect\"] = 1] = \"Redirect\";\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Fail\"] = 2] = \"Fail\";\n})(AuthenticationResultStatus || (AuthenticationResultStatus = {}));\nexport class AuthorizeService {\n  constructor() {\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    this.popUpDisabled = true;\n    this.userSubject = new BehaviorSubject(null);\n  }\n  isAuthenticated() {\n    return this.getUser().pipe(map(u => !!u));\n  }\n  getUser() {\n    return concat(this.userSubject.pipe(take(1), filter(u => !!u)), this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))), this.userSubject.asObservable());\n  }\n  getAccessToken() {\n    return from(this.ensureUserManagerInitialized()).pipe(mergeMap(() => from(this.userManager.getUser())), map(user => user && user.access_token));\n  }\n  // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n  signIn(state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.ensureUserManagerInitialized();\n      let user = null;\n      try {\n        user = yield _this.userManager.signinSilent(_this.createArguments());\n        _this.userSubject.next(user.profile);\n        return _this.success(state);\n      } catch (silentError) {\n        // User might not be authenticated, fallback to popup authentication\n        console.log('Silent authentication error: ', silentError);\n        try {\n          if (_this.popUpDisabled) {\n            throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n          }\n          user = yield _this.userManager.signinPopup(_this.createArguments());\n          _this.userSubject.next(user.profile);\n          return _this.success(state);\n        } catch (popupError) {\n          if (popupError.message === 'Popup window closed') {\n            // The user explicitly cancelled the login action by closing an opened popup.\n            return _this.error('The user closed the window.');\n          } else if (!_this.popUpDisabled) {\n            console.log('Popup authentication error: ', popupError);\n          }\n          // PopUps might be blocked by the user, fallback to redirect\n          try {\n            yield _this.userManager.signinRedirect(_this.createArguments(state));\n            return _this.redirect();\n          } catch (redirectError) {\n            console.log('Redirect authentication error: ', redirectError);\n            return _this.error(redirectError);\n          }\n        }\n      }\n    })();\n  }\n  completeSignIn(url) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.ensureUserManagerInitialized();\n        const user = yield _this2.userManager.signinCallback(url);\n        _this2.userSubject.next(user && user.profile);\n        return _this2.success(user && user.state);\n      } catch (error) {\n        console.log('There was an error signing in: ', error);\n        return _this2.error('There was an error signing in.');\n      }\n    })();\n  }\n  signOut(state) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this3.popUpDisabled) {\n          throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n        }\n        yield _this3.ensureUserManagerInitialized();\n        yield _this3.userManager.signoutPopup(_this3.createArguments());\n        _this3.userSubject.next(null);\n        return _this3.success(state);\n      } catch (popupSignOutError) {\n        console.log('Popup signout error: ', popupSignOutError);\n        try {\n          yield _this3.userManager.signoutRedirect(_this3.createArguments(state));\n          return _this3.redirect();\n        } catch (redirectSignOutError) {\n          console.log('Redirect signout error: ', redirectSignOutError);\n          return _this3.error(redirectSignOutError);\n        }\n      }\n    })();\n  }\n  completeSignOut(url) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.ensureUserManagerInitialized();\n      try {\n        const response = yield _this4.userManager.signoutCallback(url);\n        _this4.userSubject.next(null);\n        return _this4.success(response && response.state);\n      } catch (error) {\n        console.log(`There was an error trying to log out '${error}'.`);\n        return _this4.error(error);\n      }\n    })();\n  }\n  createArguments(state) {\n    return {\n      useReplaceToNavigate: true,\n      data: state\n    };\n  }\n  error(message) {\n    return {\n      status: AuthenticationResultStatus.Fail,\n      message\n    };\n  }\n  success(state) {\n    return {\n      status: AuthenticationResultStatus.Success,\n      state\n    };\n  }\n  redirect() {\n    return {\n      status: AuthenticationResultStatus.Redirect\n    };\n  }\n  ensureUserManagerInitialized() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (_this5.userManager !== undefined) {\n        return;\n      }\n      const response = yield fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n      if (!response.ok) {\n        throw new Error(`Could not load settings for '${ApplicationName}'`);\n      }\n      const settings = yield response.json();\n      settings.automaticSilentRenew = true;\n      settings.includeIdTokenInSilentRenew = true;\n      _this5.userManager = new UserManager(settings);\n      _this5.userManager.events.addUserSignedOut( /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this5.userManager.removeUser();\n        _this5.userSubject.next(null);\n      }));\n    })();\n  }\n  getUserFromStorage() {\n    return from(this.ensureUserManagerInitialized()).pipe(mergeMap(() => this.userManager.getUser()), map(u => u && u.profile));\n  }\n}\n_class = AuthorizeService;\n_class.ɵfac = function AuthorizeService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserManager","BehaviorSubject","concat","from","filter","map","mergeMap","take","tap","ApplicationPaths","ApplicationName","AuthenticationResultStatus","AuthorizeService","constructor","popUpDisabled","userSubject","isAuthenticated","getUser","pipe","u","getUserFromStorage","next","asObservable","getAccessToken","ensureUserManagerInitialized","userManager","user","access_token","signIn","state","_this","_asyncToGenerator","signinSilent","createArguments","profile","success","silentError","console","log","Error","signinPopup","popupError","message","error","signinRedirect","redirect","redirectError","completeSignIn","url","_this2","signinCallback","signOut","_this3","signoutPopup","popupSignOutError","signoutRedirect","redirectSignOutError","completeSignOut","_this4","response","signoutCallback","useReplaceToNavigate","data","status","Fail","Success","Redirect","_this5","undefined","fetch","ApiAuthorizationClientConfigurationUrl","ok","settings","json","automaticSilentRenew","includeIdTokenInSilentRenew","events","addUserSignedOut","removeUser","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\tets\\VmihailovUi\\ClientApp\\src\\api-authorization\\authorize.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { User, UserManager } from 'oidc-client';\r\nimport { BehaviorSubject, concat, from, Observable } from 'rxjs';\r\nimport { filter, map, mergeMap, take, tap } from 'rxjs/operators';\r\nimport { ApplicationPaths, ApplicationName } from './api-authorization.constants';\r\n\r\nexport type IAuthenticationResult =\r\n  SuccessAuthenticationResult |\r\n  FailureAuthenticationResult |\r\n  RedirectAuthenticationResult;\r\n\r\nexport interface SuccessAuthenticationResult {\r\n  status: AuthenticationResultStatus.Success;\r\n  state: any;\r\n}\r\n\r\nexport interface FailureAuthenticationResult {\r\n  status: AuthenticationResultStatus.Fail;\r\n  message: string;\r\n}\r\n\r\nexport interface RedirectAuthenticationResult {\r\n  status: AuthenticationResultStatus.Redirect;\r\n}\r\n\r\nexport enum AuthenticationResultStatus {\r\n  Success,\r\n  Redirect,\r\n  Fail\r\n}\r\n\r\nexport interface IUser {\r\n  name?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizeService {\r\n  // By default pop ups are disabled because they don't work properly on Edge.\r\n  // If you want to enable pop up authentication simply set this flag to false.\r\n\r\n  private popUpDisabled = true;\r\n  private userManager?: UserManager;\r\n  private userSubject: BehaviorSubject<IUser | null> = new BehaviorSubject<IUser | null>(null);\r\n\r\n  public isAuthenticated(): Observable<boolean> {\r\n    return this.getUser().pipe(map(u => !!u));\r\n  }\r\n\r\n  public getUser(): Observable<IUser | null> {\r\n    return concat(\r\n      this.userSubject.pipe(take(1), filter(u => !!u)),\r\n      this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))),\r\n      this.userSubject.asObservable());\r\n  }\r\n\r\n  public getAccessToken(): Observable<string | null> {\r\n    return from(this.ensureUserManagerInitialized())\r\n      .pipe(mergeMap(() => from(this.userManager!.getUser())),\r\n        map(user => user && user.access_token));\r\n  }\r\n\r\n  // We try to authenticate the user in three different ways:\r\n  // 1) We try to see if we can authenticate the user silently. This happens\r\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\r\n  //    on the client.\r\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\r\n  //    Pop-Up blocker or the user has disabled PopUps.\r\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\r\n  //    redirect flow.\r\n  public async signIn(state: any): Promise<IAuthenticationResult> {\r\n    await this.ensureUserManagerInitialized();\r\n    let user: User | null = null;\r\n    try {\r\n      user = await this.userManager!.signinSilent(this.createArguments());\r\n      this.userSubject.next(user.profile);\r\n      return this.success(state);\r\n    } catch (silentError) {\r\n      // User might not be authenticated, fallback to popup authentication\r\n      console.log('Silent authentication error: ', silentError);\r\n\r\n      try {\r\n        if (this.popUpDisabled) {\r\n          throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\r\n        }\r\n        user = await this.userManager!.signinPopup(this.createArguments());\r\n        this.userSubject.next(user.profile);\r\n        return this.success(state);\r\n      } catch (popupError: any) {\r\n        if (popupError.message === 'Popup window closed') {\r\n          // The user explicitly cancelled the login action by closing an opened popup.\r\n          return this.error('The user closed the window.');\r\n        } else if (!this.popUpDisabled) {\r\n          console.log('Popup authentication error: ', popupError);\r\n        }\r\n\r\n        // PopUps might be blocked by the user, fallback to redirect\r\n        try {\r\n          await this.userManager!.signinRedirect(this.createArguments(state));\r\n          return this.redirect();\r\n        } catch (redirectError: any) {\r\n          console.log('Redirect authentication error: ', redirectError);\r\n          return this.error(redirectError);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async completeSignIn(url: string): Promise<IAuthenticationResult> {\r\n    try {\r\n      await this.ensureUserManagerInitialized();\r\n      const user = await this.userManager!.signinCallback(url);\r\n      this.userSubject.next(user && user.profile);\r\n      return this.success(user && user.state);\r\n    } catch (error) {\r\n      console.log('There was an error signing in: ', error);\r\n      return this.error('There was an error signing in.');\r\n    }\r\n  }\r\n\r\n  public async signOut(state: any): Promise<IAuthenticationResult> {\r\n    try {\r\n      if (this.popUpDisabled) {\r\n        throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\r\n      }\r\n\r\n      await this.ensureUserManagerInitialized();\r\n      await this.userManager!.signoutPopup(this.createArguments());\r\n      this.userSubject.next(null);\r\n      return this.success(state);\r\n    } catch (popupSignOutError: any) {\r\n      console.log('Popup signout error: ', popupSignOutError);\r\n      try {\r\n        await this.userManager!.signoutRedirect(this.createArguments(state));\r\n        return this.redirect();\r\n      } catch (redirectSignOutError: any) {\r\n        console.log('Redirect signout error: ', redirectSignOutError);\r\n        return this.error(redirectSignOutError);\r\n      }\r\n    }\r\n  }\r\n\r\n  public async completeSignOut(url: string): Promise<IAuthenticationResult> {\r\n    await this.ensureUserManagerInitialized();\r\n    try {\r\n      const response = await this.userManager!.signoutCallback(url);\r\n      this.userSubject.next(null);\r\n      return this.success(response && response.state);\r\n    } catch (error: any) {\r\n      console.log(`There was an error trying to log out '${error}'.`);\r\n      return this.error(error);\r\n    }\r\n  }\r\n\r\n  private createArguments(state?: any): any {\r\n    return { useReplaceToNavigate: true, data: state };\r\n  }\r\n\r\n  private error(message: string): IAuthenticationResult {\r\n    return { status: AuthenticationResultStatus.Fail, message };\r\n  }\r\n\r\n  private success(state: any): IAuthenticationResult {\r\n    return { status: AuthenticationResultStatus.Success, state };\r\n  }\r\n\r\n  private redirect(): IAuthenticationResult {\r\n    return { status: AuthenticationResultStatus.Redirect };\r\n  }\r\n\r\n  private async ensureUserManagerInitialized(): Promise<void> {\r\n    if (this.userManager !== undefined) {\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\r\n    if (!response.ok) {\r\n      throw new Error(`Could not load settings for '${ApplicationName}'`);\r\n    }\r\n\r\n    const settings: any = await response.json();\r\n    settings.automaticSilentRenew = true;\r\n    settings.includeIdTokenInSilentRenew = true;\r\n    this.userManager = new UserManager(settings);\r\n\r\n    this.userManager.events.addUserSignedOut(async () => {\r\n      await this.userManager!.removeUser();\r\n      this.userSubject.next(null);\r\n    });\r\n  }\r\n\r\n  private getUserFromStorage(): Observable<IUser | null> {\r\n    return from(this.ensureUserManagerInitialized())\r\n      .pipe(\r\n        mergeMap(() => this.userManager!.getUser()),\r\n        map(u => u && u.profile));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}