{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/VladislavMihailov/source/repos/vladislavm-ui/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport jwtDecode from 'jwt-decode';\nimport { Subject } from 'rxjs';\nimport { DeleteConfirmationModalComponent } from '../ModalLogs/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { Validators } from '@angular/forms';\nlet AllHousesComponent = class AllHousesComponent {\n  constructor(houseService, modalService, router, fb, AuthorizeService) {\n    this.houseService = houseService;\n    this.modalService = modalService;\n    this.router = router;\n    this.fb = fb;\n    this.AuthorizeService = AuthorizeService;\n    this.filteredHouses = [];\n    this.filterValue = '';\n    this.activeModals = [];\n    this.houses = [];\n    this.isManager = false;\n    this.isResident = false;\n    this.filterInput$ = new Subject();\n    this.housedetails = {\n      id: 0,\n      number: 0,\n      street: '',\n      city: '',\n      country: '',\n      postcode: ''\n    };\n    this.HouseEdit = this.fb.group({\n      id: [null, Validators.required],\n      number: [null, Validators.required],\n      city: [null, Validators.required],\n      country: [null, Validators.required],\n      postcode: [null, Validators.required],\n      street: [null, Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.manager();\n    this.getHouses();\n    this.filterInput$.subscribe(filterValue => {\n      if (!filterValue.trim()) {\n        this.filteredHouses = this.houses;\n      } else {\n        this.filteredHouses = this.houses.filter(house => house.street.toLowerCase().includes(filterValue.toLowerCase()));\n      }\n    });\n  }\n  onFilterInputChange() {\n    this.filterInput$.next(this.filterValue);\n  }\n  applyFilter() {\n    if (this.filterValue.trim() === '') {\n      this.houses = this.houses;\n    } else {\n      this.houses = this.houses.filter(house => house.street.toLowerCase().includes(this.filterValue.toLowerCase()));\n    }\n  }\n  getHouses() {\n    this.houseService.getAllHouses().subscribe(data => {\n      this.houses = data;\n      this.filteredHouses = data;\n    });\n  }\n  getHousesDetails(housesId) {\n    return this.houseService.getHouseById(housesId);\n  }\n  openEditModal(housesId) {\n    this.housesId = housesId;\n    const modalRef = this.modalService.open(this.editModal);\n    this.activeModals.push(modalRef);\n    this.getHousesDetails(this.housesId).subscribe({\n      next: response => {\n        this.housedetails = response;\n      }\n    });\n  }\n  manager() {\n    this.AuthorizeService.getAccessToken().subscribe(userRole => {\n      if (userRole !== null) {\n        const token = jwtDecode(userRole);\n        const role = token.role;\n        this.isManager = role === 'Manager';\n        this.isResident = role === 'Resident';\n      } else {\n        this.isManager = false;\n        this.isResident = false;\n      }\n    });\n  }\n  deleteHouse(houseId) {\n    this.houseService.DeleteHouse(houseId).subscribe({\n      next: response => {\n        this.router.navigate(['all-houses']);\n        this.closeModalAndRefresh();\n      }\n    });\n  }\n  Delete(houseId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const result = _this.openConfirmationModal();\n      if (yield result) {\n        _this.deleteHouse(houseId);\n      } else {}\n    })();\n  }\n  openConfirmationModal() {\n    const modalRef = this.modalService.open(DeleteConfirmationModalComponent);\n    return modalRef.result.then(result => {\n      return result === true;\n    }).catch(() => {\n      return false;\n    });\n  }\n  checkAndUpdateHouse(house) {\n    const houseNumberToCheck = house.number;\n    this.houseService.doesHouseExistByNumber(houseNumberToCheck).subscribe(exists => {\n      if (exists) {\n        this.houseService.UpdateHouse(this.housedetails.id, this.housedetails).subscribe({\n          next: response => {\n            this.router.navigate(['all-houses']);\n          }\n        });\n        this.closeModalAndRefresh();\n      } else {\n        this.houseService.CreateHouse(this.housedetails).subscribe({\n          next: createdHouse => {\n            this.router.navigate(['all-houses']);\n          }\n        });\n      }\n      this.closeModalAndRefresh();\n    });\n  }\n  closeModalAndRefresh() {\n    this.activeModals.forEach(modalRef => {\n      modalRef.dismiss();\n    });\n    this.activeModals = [];\n    location.reload();\n  }\n};\n__decorate([ViewChild('editModal')], AllHousesComponent.prototype, \"editModal\", void 0);\nAllHousesComponent = __decorate([Component({\n  selector: 'app-all-houses',\n  templateUrl: './all-houses.component.html',\n  styleUrls: ['./all-houses.component.css']\n})], AllHousesComponent);\nexport { AllHousesComponent };","map":{"version":3,"names":["Component","ViewChild","jwtDecode","Subject","DeleteConfirmationModalComponent","Validators","AllHousesComponent","constructor","houseService","modalService","router","fb","AuthorizeService","filteredHouses","filterValue","activeModals","houses","isManager","isResident","filterInput$","housedetails","id","number","street","city","country","postcode","HouseEdit","group","required","ngOnInit","manager","getHouses","subscribe","trim","filter","house","toLowerCase","includes","onFilterInputChange","next","applyFilter","getAllHouses","data","getHousesDetails","housesId","getHouseById","openEditModal","modalRef","open","editModal","push","response","getAccessToken","userRole","token","role","deleteHouse","houseId","DeleteHouse","navigate","closeModalAndRefresh","Delete","_this","_asyncToGenerator","result","openConfirmationModal","then","catch","checkAndUpdateHouse","houseNumberToCheck","doesHouseExistByNumber","exists","UpdateHouse","CreateHouse","createdHouse","forEach","dismiss","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\app\\all-houses\\all-houses.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { House } from '../Models/house.model';\nimport { HomesApiService } from '../Services/homes-api.service';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { AuthorizeService } from 'src/api-authorization/authorize.service';\nimport jwtDecode from 'jwt-decode';\nimport { Subject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { DeleteConfirmationModalComponent } from '../ModalLogs/delete-confirmation-modal/delete-confirmation-modal.component';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-all-houses',\n  templateUrl: './all-houses.component.html',\n  styleUrls: ['./all-houses.component.css']\n})\nexport class AllHousesComponent {\n  @ViewChild('editModal') editModal!: ElementRef;\n  filteredHouses: House[] = [];\n  HouseEdit!: FormGroup;\n  filterValue = '';\n  activeModals: NgbModalRef[] = [];\n  housesId!: number;\n  houses: House[] = [];\n  isManager: boolean = false;\n  isResident: boolean = false;\n  filterInput$: Subject<string> = new Subject<string>();\n  housedetails: House = {\n    id: 0,\n    number: 0,\n    street: '',\n    city: '',\n    country: '',\n    postcode: '',\n  }\n\n  constructor(private houseService: HomesApiService,\n    public modalService: NgbModal,\n    private router: Router,\n    private fb: FormBuilder,\n    private AuthorizeService: AuthorizeService,\n  ) {\n    this.HouseEdit = this.fb.group({\n      id: [null, Validators.required],\n      number: [null, Validators.required],\n      city: [null, Validators.required],\n      country: [null, Validators.required],\n      postcode: [null, Validators.required],\n      street: [null, Validators.required],\n    });\n  }\n  ngOnInit(): void {\n    this.manager();\n    this.getHouses();\n    this.filterInput$.subscribe((filterValue) => {\n      if (!filterValue.trim()) {\n        this.filteredHouses = this.houses;\n      } else {\n        this.filteredHouses = this.houses.filter((house) =>\n          house.street.toLowerCase().includes(filterValue.toLowerCase())\n        );\n      }\n    });\n  }\n  onFilterInputChange() {\n    this.filterInput$.next(this.filterValue);\n  }\n\n  applyFilter() {\n    if (this.filterValue.trim() === '') {\n      this.houses = this.houses;\n    } else {\n      this.houses = this.houses.filter((house) =>\n        house.street.toLowerCase().includes(this.filterValue.toLowerCase())\n      );\n    }\n  }\n  getHouses() {\n    this.houseService.getAllHouses().subscribe((data: House[]) => {\n      this.houses = data;\n      this.filteredHouses = data;\n    });\n  }\n  getHousesDetails(housesId: number) {\n    return this.houseService.getHouseById(housesId);\n  }\n\n  openEditModal(housesId: number) {\n    this.housesId = housesId;\n    const modalRef = this.modalService.open(this.editModal);\n    this.activeModals.push(modalRef);\n\n    this.getHousesDetails(this.housesId).subscribe({\n      next: (response: House) => {\n        this.housedetails = response;\n      }\n    });\n\n  }\n\n  manager(): void {\n    this.AuthorizeService.getAccessToken().subscribe((userRole: string | null) => {\n      if (userRole !== null) {\n        const token: any = jwtDecode(userRole);\n        const role = token.role;\n\n        this.isManager = role === 'Manager';\n        this.isResident = role === 'Resident';\n      } else {\n        this.isManager = false;\n        this.isResident = false;\n      }\n    });\n  }\n\n  deleteHouse(houseId: number) {\n    this.houseService.DeleteHouse(houseId).subscribe({\n      next: (response) => {\n        this.router.navigate(['all-houses'])\n        this.closeModalAndRefresh();\n      }\n    })\n\n  }\n  async Delete(houseId: number) {\n    const result = this.openConfirmationModal();\n    if (await result) {\n      this.deleteHouse(houseId)\n    } else {\n    }\n  }\n\n  openConfirmationModal(): Promise<boolean> {\n    const modalRef: NgbModalRef = this.modalService.open(DeleteConfirmationModalComponent);\n\n    return modalRef.result.then((result) => {\n      return result === true;\n    }).catch(() => {\n      return false;\n    });\n  }\n\n\n  checkAndUpdateHouse(house: House) {\n    const houseNumberToCheck = house.number;\n    this.houseService.doesHouseExistByNumber(houseNumberToCheck).subscribe((exists) => {\n      if (exists) {\n        this.houseService.UpdateHouse(this.housedetails.id, this.housedetails).subscribe({\n          next: (response) => {\n            this.router.navigate(['all-houses']);\n          }\n        });\n        this.closeModalAndRefresh();\n      } else {\n        this.houseService.CreateHouse(this.housedetails).subscribe({\n          next: (createdHouse) => {\n            this.router.navigate(['all-houses']);\n          }\n        });\n      }\n\n      this.closeModalAndRefresh();\n    });\n  }\n\n  closeModalAndRefresh() {\n    this.activeModals.forEach(modalRef => {\n      modalRef.dismiss();\n    });\n    this.activeModals = [];\n    location.reload();\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}