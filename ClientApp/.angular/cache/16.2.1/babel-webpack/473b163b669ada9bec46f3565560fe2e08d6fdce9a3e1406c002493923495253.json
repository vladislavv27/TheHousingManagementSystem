{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/VladislavMihailov/source/repos/tets/VmihailovUi/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { LogoutActions, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n// The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\nexport class LogoutComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n      switch (action.path) {\n        case LogoutActions.Logout:\n          if (!!window.history.state.local) {\n            yield _this.logout(_this.getReturnUrl());\n          } else {\n            // This prevents regular links to <app>/authentication/logout from triggering a logout\n            _this.message.next('The logout was not initiated from within the page.');\n          }\n          break;\n        case LogoutActions.LogoutCallback:\n          yield _this.processLogoutCallback();\n          break;\n        case LogoutActions.LoggedOut:\n          _this.message.next('You successfully logged out!');\n          break;\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n  logout(returnUrl) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const isauthenticated = yield _this2.authorizeService.isAuthenticated().pipe(take(1)).toPromise();\n      if (isauthenticated) {\n        const result = yield _this2.authorizeService.signOut(state);\n        switch (result.status) {\n          case AuthenticationResultStatus.Redirect:\n            break;\n          case AuthenticationResultStatus.Success:\n            yield _this2.navigateToReturnUrl(returnUrl);\n            break;\n          case AuthenticationResultStatus.Fail:\n            _this2.message.next(result.message);\n            break;\n          default:\n            throw new Error('Invalid authentication result status.');\n        }\n      } else {\n        _this2.message.next('You successfully logged out!');\n      }\n    })();\n  }\n  processLogoutCallback() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignOut(url);\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as the only time completeAuthentication finishes\n          // is when we are doing a redirect sign in flow.\n          throw new Error('Should not redirect.');\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n          break;\n        default:\n          throw new Error('Invalid authentication result status.');\n      }\n    })();\n  }\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl;\n    // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n    return state && state.returnUrl || fromQuery || ApplicationPaths.LoggedOut;\n  }\n}\n_class = LogoutComponent;\n_class.ɵfac = function LogoutComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-logout\"]],\n  decls: 3,\n  vars: 3,\n  template: function LogoutComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.message));\n    }\n  },\n  dependencies: [i3.AsyncPipe],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["AuthenticationResultStatus","BehaviorSubject","take","LogoutActions","ApplicationPaths","ReturnUrlType","LogoutComponent","constructor","authorizeService","activatedRoute","router","message","ngOnInit","_this","_asyncToGenerator","action","snapshot","url","path","Logout","window","history","state","local","logout","getReturnUrl","next","LogoutCallback","processLogoutCallback","LoggedOut","Error","returnUrl","_this2","isauthenticated","isAuthenticated","pipe","toPromise","result","signOut","status","Redirect","Success","navigateToReturnUrl","Fail","_this3","location","href","completeSignOut","_this4","navigateByUrl","replaceUrl","fromQuery","queryParams","startsWith","origin","test","i0","ɵɵdirectiveInject","i1","AuthorizeService","i2","ActivatedRoute","Router","selectors","decls","vars","template","LogoutComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\tets\\VmihailovUi\\ClientApp\\src\\api-authorization\\logout\\logout.component.ts","C:\\Users\\VladislavMihailov\\source\\repos\\tets\\VmihailovUi\\ClientApp\\src\\api-authorization\\logout\\logout.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationResultStatus, AuthorizeService } from '../authorize.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { LogoutActions, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\r\n\r\n// The main responsibility of this component is to handle the user's logout process.\r\n// This is the starting point for the logout process, which is usually initiated when a\r\n// user clicks on the logout button on the LoginMenu component.\r\n@Component({\r\n  selector: 'app-logout',\r\n  templateUrl: './logout.component.html',\r\n  styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n  public message = new BehaviorSubject<string | null>(null);\r\n\r\n  constructor(\r\n    private authorizeService: AuthorizeService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router) { }\r\n\r\n  async ngOnInit() {\r\n    const action = this.activatedRoute.snapshot.url[1];\r\n    switch (action.path) {\r\n      case LogoutActions.Logout:\r\n        if (!!window.history.state.local) {\r\n          await this.logout(this.getReturnUrl());\r\n        } else {\r\n          // This prevents regular links to <app>/authentication/logout from triggering a logout\r\n          this.message.next('The logout was not initiated from within the page.');\r\n        }\r\n\r\n        break;\r\n      case LogoutActions.LogoutCallback:\r\n        await this.processLogoutCallback();\r\n        break;\r\n      case LogoutActions.LoggedOut:\r\n        this.message.next('You successfully logged out!');\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid action '${action}'`);\r\n    }\r\n  }\r\n\r\n  private async logout(returnUrl: string): Promise<void> {\r\n    const state: INavigationState = { returnUrl };\r\n    const isauthenticated = await this.authorizeService.isAuthenticated().pipe(\r\n      take(1)\r\n    ).toPromise();\r\n    if (isauthenticated) {\r\n      const result = await this.authorizeService.signOut(state);\r\n      switch (result.status) {\r\n        case AuthenticationResultStatus.Redirect:\r\n          break;\r\n        case AuthenticationResultStatus.Success:\r\n          await this.navigateToReturnUrl(returnUrl);\r\n          break;\r\n        case AuthenticationResultStatus.Fail:\r\n          this.message.next(result.message);\r\n          break;\r\n        default:\r\n          throw new Error('Invalid authentication result status.');\r\n      }\r\n    } else {\r\n      this.message.next('You successfully logged out!');\r\n    }\r\n  }\r\n\r\n  private async processLogoutCallback(): Promise<void> {\r\n    const url = window.location.href;\r\n    const result = await this.authorizeService.completeSignOut(url);\r\n    switch (result.status) {\r\n      case AuthenticationResultStatus.Redirect:\r\n        // There should not be any redirects as the only time completeAuthentication finishes\r\n        // is when we are doing a redirect sign in flow.\r\n        throw new Error('Should not redirect.');\r\n      case AuthenticationResultStatus.Success:\r\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n        break;\r\n      case AuthenticationResultStatus.Fail:\r\n        this.message.next(result.message);\r\n        break;\r\n      default:\r\n        throw new Error('Invalid authentication result status.');\r\n    }\r\n  }\r\n\r\n  private async navigateToReturnUrl(returnUrl: string) {\r\n    await this.router.navigateByUrl(returnUrl, {\r\n      replaceUrl: true\r\n    });\r\n  }\r\n\r\n  private getReturnUrl(state?: INavigationState): string {\r\n    const fromQuery = (this.activatedRoute.snapshot.queryParams as INavigationState).returnUrl;\r\n    // If the url is coming from the query string, check that is either\r\n    // a relative url or an absolute url\r\n    if (fromQuery &&\r\n      !(fromQuery.startsWith(`${window.location.origin}/`) ||\r\n        /\\/[^\\/].*/.test(fromQuery))) {\r\n      // This is an extra check to prevent open redirects.\r\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\r\n    }\r\n    return (state && state.returnUrl) ||\r\n      fromQuery ||\r\n      ApplicationPaths.LoggedOut;\r\n  }\r\n}\r\n\r\ninterface INavigationState {\r\n  [ReturnUrlType]: string;\r\n}\r\n","<p>{{ message | async }}</p>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}