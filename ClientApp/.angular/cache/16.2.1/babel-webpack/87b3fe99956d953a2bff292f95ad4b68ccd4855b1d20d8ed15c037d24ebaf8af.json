{"ast":null,"code":"var _class;\nimport { tap } from 'rxjs/operators';\nimport { ApplicationPaths, QueryParameterNames } from './api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authorize.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizeGuard {\n  constructor(authorize, router) {\n    this.authorize = authorize;\n    this.router = router;\n  }\n  canActivate(_next, state) {\n    return this.authorize.isAuthenticated().pipe(tap(isAuthenticated => this.handleAuthorization(isAuthenticated, state)));\n  }\n  handleAuthorization(isAuthenticated, state) {\n    if (!isAuthenticated) {\n      this.router.navigate(ApplicationPaths.LoginPathComponents, {\n        queryParams: {\n          [QueryParameterNames.ReturnUrl]: state.url\n        }\n      });\n    }\n  }\n}\n_class = AuthorizeGuard;\n_class.ɵfac = function AuthorizeGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthorizeService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["tap","ApplicationPaths","QueryParameterNames","AuthorizeGuard","constructor","authorize","router","canActivate","_next","state","isAuthenticated","pipe","handleAuthorization","navigate","LoginPathComponents","queryParams","ReturnUrl","url","i0","ɵɵinject","i1","AuthorizeService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\api-authorization\\authorize.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthorizeService } from './authorize.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ApplicationPaths, QueryParameterNames } from './api-authorization.constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizeGuard  {\r\n  constructor(private authorize: AuthorizeService, private router: Router) {\r\n  }\r\n  canActivate(\r\n    _next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n      return this.authorize.isAuthenticated()\r\n        .pipe(tap(isAuthenticated => this.handleAuthorization(isAuthenticated, state)));\r\n  }\r\n\r\n  private handleAuthorization(isAuthenticated: boolean, state: RouterStateSnapshot) {\r\n    if (!isAuthenticated) {\r\n      this.router.navigate(ApplicationPaths.LoginPathComponents, {\r\n        queryParams: {\r\n          [QueryParameterNames.ReturnUrl]: state.url\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAIA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,+BAA+B;;;;AAKrF,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,SAA2B,EAAUC,MAAc;IAAnD,KAAAD,SAAS,GAATA,SAAS;IAA4B,KAAAC,MAAM,GAANA,MAAM;EAC/D;EACAC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,OAAO,IAAI,CAACJ,SAAS,CAACK,eAAe,EAAE,CACpCC,IAAI,CAACX,GAAG,CAACU,eAAe,IAAI,IAAI,CAACE,mBAAmB,CAACF,eAAe,EAAED,KAAK,CAAC,CAAC,CAAC;EACrF;EAEQG,mBAAmBA,CAACF,eAAwB,EAAED,KAA0B;IAC9E,IAAI,CAACC,eAAe,EAAE;MACpB,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAACZ,gBAAgB,CAACa,mBAAmB,EAAE;QACzDC,WAAW,EAAE;UACX,CAACb,mBAAmB,CAACc,SAAS,GAAGP,KAAK,CAACQ;;OAE1C,CAAC;;EAEN;;SAlBWd,cAAc;;mBAAdA,MAAc,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAdpB,MAAc;EAAAqB,OAAA,EAAdrB,MAAc,CAAAsB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}