{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/VladislavMihailov/source/repos/vladislavm-ui/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { Component, ViewChild } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport jwtDecode from 'jwt-decode';\nimport { DeleteConfirmationModalComponent } from '../delete-confirmation-modal/delete-confirmation-modal.component';\nimport { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class HouseDetailComponent {\n  constructor(modalService, route, router, houseService, AuthorizeService) {\n    this.modalService = modalService;\n    this.route = route;\n    this.router = router;\n    this.houseService = houseService;\n    this.AuthorizeService = AuthorizeService;\n    this.activeModals = [];\n    this.isManager = false;\n    this.isResident = false;\n    this.housesselector = [];\n    this.housedetails = {\n      id: 0,\n      number: 0,\n      street: '',\n      city: '',\n      country: '',\n      postcode: ''\n    };\n    this.apartmentdetails = {\n      id: 0,\n      number: 0,\n      floor: 0,\n      numberOfRooms: 0,\n      population: 0,\n      fullArea: 0,\n      livingSpace: 0,\n      houseId: 0\n    };\n  }\n  ngOnInit() {\n    this.manager();\n    this.UserApartmentsCheck();\n    this.getHouses();\n  }\n  UserApartmentsCheck() {\n    this.AuthorizeService.getAccessToken().subscribe(userRole => {\n      if (userRole !== null && !this.isManager) {\n        const token = jwtDecode(userRole);\n        const houseId = token.houseid;\n        this.houseService.GetApartmentById(houseId).subscribe(apartment => {\n          this.apartments = [apartment];\n        });\n      } else {\n        this.getHouses();\n        this.route.params.pipe(switchMap(params => {\n          this.houseId = +params['id'];\n          return this.getHouseDetails(this.houseId || 0);\n        })).subscribe(response => {\n          this.housedetails = response;\n          if (this.houseId !== undefined) {\n            this.getApartmentsByHouseId(this.houseId);\n          }\n        });\n      }\n    });\n  }\n  getHouses() {\n    this.houseService.getAllHouses().subscribe(data => {\n      this.housesselector = data;\n    });\n  }\n  getApartmentDetails(apartmentId) {\n    return this.houseService.GetApartmentById(apartmentId);\n  }\n  onSelected(selectedHouse) {\n    this.router.navigate(['house', selectedHouse]);\n  }\n  getHouseDetails(houseId) {\n    return this.houseService.getHouseById(houseId);\n  }\n  openEditModal(apartmentId) {\n    this.apartmentId = apartmentId;\n    const modalRef = this.modalService.open(this.editModal);\n    this.activeModals.push(modalRef);\n    this.getApartmentDetails(this.apartmentId).subscribe({\n      next: response => {\n        this.apartmentdetails = response;\n      }\n    });\n  }\n  getApartmentsByHouseId(houseId) {\n    this.houseService.GetHouseApartments(houseId).subscribe(apartments => {\n      this.apartments = apartments;\n    }, error => {\n      console.error('Error fetching apartments:', error);\n    });\n  }\n  manager() {\n    this.AuthorizeService.getAccessToken().subscribe(userRole => {\n      if (userRole !== null) {\n        const token = jwtDecode(userRole);\n        const role = token.role;\n        this.isManager = role === 'Manager';\n        this.isResident = role === 'Resident';\n      } else {\n        this.isManager = false;\n        this.isResident = false;\n      }\n    });\n  }\n  openCreateModal() {\n    this.apartmentdetails = {};\n    const modalRef = this.modalService.open(this.CreateModal);\n    this.activeModals.push(modalRef);\n  }\n  CreateApartment(apartmentdetails) {\n    this.houseService.CreateApartment(this.apartmentdetails).subscribe(() => {});\n    this.closeModalAndRefresh();\n  }\n  checkAndUpdateApartment(apartment) {\n    this.houseService.UpdateApartment(this.apartmentdetails.id, this.apartmentdetails).subscribe(() => {});\n    this.closeModalAndRefresh();\n  }\n  Delete(apartmentId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const result = _this.openConfirmationModal();\n      if (yield result) {\n        _this.deletApartment(_this.apartmentId);\n      } else {}\n    })();\n  }\n  deletApartment(apartmentId) {\n    this.houseService.DeleteApartment(apartmentId).subscribe({\n      next: response => {\n        this.closeModalAndRefresh();\n      }\n    });\n  }\n  openConfirmationModal() {\n    const modalRef = this.modalService.open(DeleteConfirmationModalComponent);\n    this.activeModals.push(modalRef);\n    return modalRef.result.then(result => {\n      return result === true;\n    }).catch(() => {\n      return false;\n    });\n  }\n  closeModalAndRefresh() {\n    this.activeModals.forEach(modalRef => {\n      modalRef.dismiss();\n    });\n    this.activeModals = [];\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => this.router.navigate(['house/' + this.apartmentdetails.houseId]));\n  }\n}\n_class = HouseDetailComponent;\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Component","ViewChild","Injectable","jwtDecode","DeleteConfirmationModalComponent","switchMap","HouseDetailComponent","constructor","modalService","route","router","houseService","AuthorizeService","activeModals","isManager","isResident","housesselector","housedetails","id","number","street","city","country","postcode","apartmentdetails","floor","numberOfRooms","population","fullArea","livingSpace","houseId","ngOnInit","manager","UserApartmentsCheck","getHouses","getAccessToken","subscribe","userRole","token","houseid","GetApartmentById","apartment","apartments","params","pipe","getHouseDetails","response","undefined","getApartmentsByHouseId","getAllHouses","data","getApartmentDetails","apartmentId","onSelected","selectedHouse","navigate","getHouseById","openEditModal","modalRef","open","editModal","push","next","GetHouseApartments","error","console","role","openCreateModal","CreateModal","CreateApartment","closeModalAndRefresh","checkAndUpdateApartment","UpdateApartment","Delete","_this","_asyncToGenerator","result","openConfirmationModal","deletApartment","DeleteApartment","then","catch","forEach","dismiss","navigateByUrl","skipLocationChange","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\app\\house-detail\\house-detail.component.ts"],"sourcesContent":["import { House } from './../Models/house.model';\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { HomesApiService } from '..//Services/homes-api.service';\nimport { Apartment } from '../Models/apartment.model';\nimport { Injectable } from '@angular/core';\nimport { AuthorizeService } from 'src/api-authorization/authorize.service';\nimport jwtDecode from 'jwt-decode';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { DeleteConfirmationModalComponent } from '../delete-confirmation-modal/delete-confirmation-modal.component';\nimport { switchMap } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\n@Injectable({\n  providedIn: 'root',\n})\n@Component({\n  selector: 'app-house-detail',\n  templateUrl: './house-detail.component.html',\n  styleUrls: ['./house-detail.component.css'],\n})\nexport class HouseDetailComponent implements OnInit {\n  @ViewChild('editModal') editModal!: ElementRef;\n  @ViewChild('CreateModal') CreateModal!: ElementRef;\n  apartmentForm!:FormGroup;\n  houseId!: number;\n  activeModals: NgbModalRef[] = [];\n  isManager: boolean = false;\n  isResident: boolean = false;\n  apartmentId!: number;\n  house!: House;\n  apartments!: Apartment[];\n  selectedHouse!: number;\n  housesselector: House[] = [];\n  housedetails: House = {\n    id: 0,\n    number: 0,\n    street: '',\n    city: '',\n    country: '',\n    postcode: '',\n  };\n  apartmentdetails: Apartment = {\n    id: 0,\n    number: 0,\n    floor: 0,\n    numberOfRooms: 0,\n    population: 0,\n    fullArea: 0,\n    livingSpace: 0,\n    houseId: 0,\n  };\n\n  constructor(\n    public modalService: NgbModal,\n    private route: ActivatedRoute,\n    private router: Router,\n    private houseService: HomesApiService,\n    private AuthorizeService: AuthorizeService\n  ) { }\n  ngOnInit(): void {\n    this.manager();\n    this.UserApartmentsCheck();\n    this.getHouses();\n  }\n\n  UserApartmentsCheck() {\n    this.AuthorizeService.getAccessToken().subscribe(\n      (userRole: string | null) => {\n        if (userRole !== null && !this.isManager) {\n          const token: any = jwtDecode(userRole);\n          const houseId = token.houseid;\n\n          this.houseService\n            .GetApartmentById(houseId)\n            .subscribe((apartment: Apartment) => {\n              this.apartments = [apartment];\n            });\n        } else {\n          this.getHouses();\n          this.route.params\n            .pipe(\n              switchMap((params) => {\n                this.houseId = +params['id'];\n                return this.getHouseDetails(this.houseId || 0);\n              })\n            )\n            .subscribe((response: House) => {\n              this.housedetails = response;\n\n              if (this.houseId !== undefined) {\n                this.getApartmentsByHouseId(this.houseId);\n              }\n            });\n        }\n      }\n    );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  getHouses() {\n    this.houseService.getAllHouses().subscribe((data: House[]) => {\n      this.housesselector = data;\n    });\n  }\n  getApartmentDetails(apartmentId: number) {\n    return this.houseService.GetApartmentById(apartmentId);\n  }\n\n  onSelected(selectedHouse: number) {\n    this.router.navigate(['house', selectedHouse]);\n  }\n  getHouseDetails(houseId: number) {\n    return this.houseService.getHouseById(houseId);\n  }\n\n  openEditModal(apartmentId: number) {\n    this.apartmentId = apartmentId;\n    const modalRef = this.modalService.open(this.editModal);\n    this.activeModals.push(modalRef);\n\n    this.getApartmentDetails(this.apartmentId).subscribe({\n      next: (response: Apartment) => {\n        this.apartmentdetails = response;\n      },\n    });\n  }\n\n  getApartmentsByHouseId(houseId: number) {\n    this.houseService.GetHouseApartments(houseId).subscribe(\n      (apartments: Apartment[]) => {\n        this.apartments = apartments;\n      },\n      (error) => {\n        console.error('Error fetching apartments:', error);\n      }\n    );\n  }\n\n  manager(): void {\n    this.AuthorizeService.getAccessToken().subscribe(\n      (userRole: string | null) => {\n        if (userRole !== null) {\n          const token: any = jwtDecode(userRole);\n          const role = token.role;\n\n          this.isManager = role === 'Manager';\n          this.isResident = role === 'Resident';\n        } else {\n          this.isManager = false;\n          this.isResident = false;\n        }\n      }\n    );\n  }\n\n  openCreateModal() {\n    this.apartmentdetails = {} as Apartment;\n    const modalRef = this.modalService.open(this.CreateModal);\n    this.activeModals.push(modalRef);\n  }\n  CreateApartment(apartmentdetails: Apartment) {\n    this.houseService\n      .CreateApartment(this.apartmentdetails)\n      .subscribe(() => { });\n    this.closeModalAndRefresh();\n  }\n  checkAndUpdateApartment(apartment: Apartment) {\n    this.houseService\n      .UpdateApartment(this.apartmentdetails.id, this.apartmentdetails)\n      .subscribe(() => { });\n    this.closeModalAndRefresh();\n  }\n\n  async Delete(apartmentId: number) {\n    const result = this.openConfirmationModal();\n    if (await result) {\n      this.deletApartment(this.apartmentId);\n    } else {\n    }\n  }\n  deletApartment(apartmentId: number) {\n    this.houseService.DeleteApartment(apartmentId).subscribe({\n      next: (response) => {\n        this.closeModalAndRefresh();\n      },\n    });\n  }\n  openConfirmationModal(): Promise<boolean> {\n    const modalRef: NgbModalRef = this.modalService.open(\n      DeleteConfirmationModalComponent\n    );\n    this.activeModals.push(modalRef);\n\n    return modalRef.result\n      .then((result) => {\n        return result === true;\n      })\n      .catch(() => {\n        return false;\n      });\n  }\n  closeModalAndRefresh() {\n    this.activeModals.forEach((modalRef) => {\n      modalRef.dismiss();\n    });\n    this.activeModals = [];\n    this.router\n      .navigateByUrl('/', { skipLocationChange: true })\n      .then(() =>\n        this.router.navigate(['house/' + this.apartmentdetails.houseId])\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}