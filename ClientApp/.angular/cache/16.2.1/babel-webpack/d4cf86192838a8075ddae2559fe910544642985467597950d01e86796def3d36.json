{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HomesApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7281/api';\n  }\n  sendTokenToApi(token, residentId) {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${userRole}`\n    });\n    const apiUrl = `${this.apiUrl}/api/residents/profile`;\n    // Include residentId in the request body\n    const requestBody = {\n      residentId\n    };\n    console.log();\n    return this.http.post(apiUrl, requestBody, {\n      headers\n    });\n  }\n  getAllHouses() {\n    return this.http.get(`${this.apiUrl}/houses`);\n  }\n  getHouseById(id) {\n    return this.http.get(`${this.apiUrl}/houses/${id}`);\n  }\n  getAllApartments() {\n    return this.http.get(`${this.apiUrl}/apartments`);\n  }\n  GetHouseApartments(houseId) {\n    return this.http.get(`${this.apiUrl}/houses/${houseId}/apartments`);\n  }\n  UpdateHouse(id, house) {\n    return this.http.put(`${this.apiUrl}/houses/${id}`, house);\n  }\n  UpdateApartment(id, apartment) {\n    return this.http.put(`${this.apiUrl}/apartments/${id}`, apartment);\n  }\n  GetApartmentById(id) {\n    return this.http.get(`${this.apiUrl}/apartments/${id}`);\n  }\n  GetApartmentsResident(apartmentId) {\n    return this.http.get(`${this.apiUrl}/apartments/${apartmentId}/residents`);\n  }\n  DeleteHouse(id) {\n    return this.http.delete(`${this.apiUrl}/houses/${id}`);\n  }\n  DeleteApartment(id) {\n    return this.http.delete(`${this.apiUrl}/apartments/${id}`);\n  }\n  CreateApartment(apartmentcreate) {\n    apartmentcreate.id = 0;\n    return this.http.post(this.apiUrl + '/apartments', apartmentcreate);\n  }\n  CreateHouse(housecreate) {\n    housecreate.id = 0;\n    return this.http.post(this.apiUrl + '/houses', housecreate);\n  }\n  GetResidentById(id) {\n    return this.http.get(`${this.apiUrl}/residents/${id}`);\n  }\n  DeleteResident(id) {\n    return this.http.delete(`${this.apiUrl}/residents/${id}`);\n  }\n  UpdateResident(id, resident) {\n    return this.http.put(`${this.apiUrl}/residents/${id}`, resident);\n  }\n  CreateResident(residentcreate) {\n    residentcreate.id = 0;\n    return this.http.post(this.apiUrl + '/residents', residentcreate);\n  }\n  doesHouseExistByNumber(houseNumber) {\n    return this.getAllHouses().pipe(map(houses => houses.some(house => house.number === houseNumber)));\n  }\n  doesApartmentExistByNumber(apartmentNumber, houseId) {\n    return this.GetHouseApartments(houseId).pipe(map(apartment => apartment.some(apartment => apartment.number === apartmentNumber)));\n  }\n  doesResidentExistByNumber(personalcode, apartmentNumber) {\n    return this.GetApartmentsResident(apartmentNumber).pipe(map(resdident => resdident.some(resdident => resdident.personalCode === personalcode)));\n  }\n}\n_class = HomesApiService;\n_class.ɵfac = function HomesApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","map","HomesApiService","constructor","http","apiUrl","sendTokenToApi","token","residentId","headers","Authorization","userRole","requestBody","console","log","post","getAllHouses","get","getHouseById","id","getAllApartments","GetHouseApartments","houseId","UpdateHouse","house","put","UpdateApartment","apartment","GetApartmentById","GetApartmentsResident","apartmentId","DeleteHouse","delete","DeleteApartment","CreateApartment","apartmentcreate","CreateHouse","housecreate","GetResidentById","DeleteResident","UpdateResident","resident","CreateResident","residentcreate","doesHouseExistByNumber","houseNumber","pipe","houses","some","number","doesApartmentExistByNumber","apartmentNumber","doesResidentExistByNumber","personalcode","resdident","personalCode","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\app\\Services\\homes-api.service.ts"],"sourcesContent":["import { Resident } from './../Models/resident.model';\nimport { Apartment } from './../Models/apartment.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map, tap } from 'rxjs';\nimport { House } from '../Models/house.model';\n@Injectable({\n  providedIn: 'root', // Or specify a module if needed\n})\nexport class HomesApiService {\n\n   private apiUrl= 'https://localhost:7281/api'\n  AuthorizeService: any;\n\n  constructor(private http: HttpClient) {}\n\n  sendTokenToApi(token: any, residentId: any): Observable<any> {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${userRole}`,\n    });\n  \n    const apiUrl = `${this.apiUrl}/api/residents/profile`;\n  \n    // Include residentId in the request body\n    const requestBody = { residentId };\n  console.log()\n    return this.http.post(apiUrl, requestBody, { headers });\n  }\n\n  getAllHouses(): Observable<House[]> {\n    return this.http.get<House[]>(`${this.apiUrl}/houses`);\n  }\n  getHouseById(id: number): Observable<House> {\n    return this.http.get<House>(`${this.apiUrl}/houses/${id}`);\n  }\n  getAllApartments(): Observable<Apartment[]> {\n    return this.http.get<Apartment[]>(`${this.apiUrl}/apartments`);\n  }\n  \n  GetHouseApartments(houseId: number): Observable<Apartment[]> {\n    return this.http.get<Apartment[]>(`${this.apiUrl}/houses/${houseId}/apartments`);\n  }\n  UpdateHouse(id: number, house: House): Observable<any> {\n    return this.http.put(`${this.apiUrl}/houses/${id}`, house);\n  }\n  UpdateApartment(id: number, apartment: Apartment): Observable<any> {\n    return this.http.put(`${this.apiUrl}/apartments/${id}`, apartment);\n  }\n  GetApartmentById(id: number):Observable<Apartment>{\n    return this.http.get<Apartment>(`${this.apiUrl}/apartments/${id}`);\n\n  }\n  GetApartmentsResident(apartmentId:number):Observable<Resident[]>{\n    return this.http.get<Resident[]>(`${this.apiUrl}/apartments/${apartmentId}/residents`);\n  }\n  DeleteHouse(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/houses/${id}`);\n  }\n  DeleteApartment(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/apartments/${id}`);\n  }\n  CreateApartment(apartmentcreate: Apartment):Observable<Apartment>{\n    apartmentcreate.id=0;\n    return this.http.post<Apartment>(this.apiUrl+'/apartments',apartmentcreate);\n  }\n  CreateHouse(housecreate: House):Observable<House>{\n    housecreate.id=0;\n    return this.http.post<House>(this.apiUrl+'/houses',housecreate);\n  }\n  GetResidentById(id: number): Observable<Resident> {\n    return this.http.get<Resident>(`${this.apiUrl}/residents/${id}`);\n  }\n  DeleteResident(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/residents/${id}`);\n  }\n  UpdateResident(id: number, resident: Resident): Observable<any> {\n    return this.http.put(`${this.apiUrl}/residents/${id}`, resident);\n  }\n  CreateResident(residentcreate: Resident):Observable<Resident>{\n    residentcreate.id=0;\n    return this.http.post<Resident>(this.apiUrl+'/residents',residentcreate);\n  }\n  doesHouseExistByNumber(houseNumber: number): Observable<boolean> {\n    return this.getAllHouses().pipe(map((houses) => houses.some((house) => house.number === houseNumber))\n    );\n  }\n  doesApartmentExistByNumber(apartmentNumber: number,houseId:number): Observable<boolean> {\n    return this.GetHouseApartments(houseId).pipe(map((apartment) => apartment.some((apartment) => apartment.number === apartmentNumber))\n    );\n  }\n  doesResidentExistByNumber(personalcode: string,apartmentNumber:number): Observable<boolean> {\n    return this.GetApartmentsResident(apartmentNumber).pipe(map((resdident) => resdident.some((resdident) => resdident.personalCode === personalcode))\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}