{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/VladislavMihailov/source/repos/vladislavm-ui/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ApartmentEditComponent } from '../ModalLogs/apartment-edit/apartment-edit.component';\nimport jwtDecode from 'jwt-decode';\nimport { DeleteConfirmationModalComponent } from '../ModalLogs/delete-confirmation-modal/delete-confirmation-modal.component';\nlet ApartmentComponent = class ApartmentComponent {\n  constructor(activeModal, modalService, houseService, route, router, AuthorizeService) {\n    this.activeModal = activeModal;\n    this.modalService = modalService;\n    this.houseService = houseService;\n    this.route = route;\n    this.router = router;\n    this.AuthorizeService = AuthorizeService;\n    this.isManager = false;\n    this.isResident = false;\n    this.residents = [];\n    this.apartmentdetails = {\n      id: 0,\n      number: 0,\n      floor: 0,\n      numberOfRooms: 0,\n      population: 0,\n      fullArea: 0,\n      livingSpace: 0,\n      houseId: 0\n    };\n    this.residentdetails = {\n      id: 0,\n      name: '',\n      surname: '',\n      personalCode: '',\n      dateOfBirth: new Date(2000, 0, 1),\n      phone: '',\n      email: '',\n      isOwner: false,\n      apartmentId: 0\n    };\n  }\n  ngOnInit() {\n    this.manager();\n    this.route.params.subscribe(params => {\n      this.apartmentId = +params['id'];\n      this.getApartmentDetails(this.apartmentId);\n    });\n    this.getApartmentsResidents(this.apartmentId);\n    this.AuthorizeService.getUser().subscribe(data => {\n      if (data && data.name) {\n        this.currentUser = data.name;\n      }\n    });\n  }\n  getResidentDetails(residentId) {\n    return this.houseService.GetResidentById(residentId);\n  }\n  getApartmentDetails(apartmentId) {\n    return this.houseService.GetApartmentById(apartmentId);\n  }\n  getApartmentsResidents(Apartmentid) {\n    this.houseService.GetApartmentsResident(Apartmentid).subscribe(residents => {\n      this.residents = residents;\n    });\n  }\n  openEditModal(residentId) {\n    this.residentId = residentId;\n    this.modalService.open(this.editModal);\n    this.getResidentDetails(this.residentId).subscribe({\n      next: response => {\n        this.residentdetails = response;\n      }\n    });\n  }\n  openEditModalEditApartment(apartmentId) {\n    const modalRef = this.modalService.open(ApartmentEditComponent);\n    modalRef.componentInstance.apartmentId = apartmentId;\n  }\n  manager() {\n    this.AuthorizeService.getAccessToken().subscribe(userRole => {\n      if (userRole !== null) {\n        const token = jwtDecode(userRole);\n        const role = token.role;\n        this.isManager = role === 'Manager';\n        this.isResident = role === 'Resident';\n      } else {\n        this.isManager = false;\n        this.isResident = false;\n      }\n    });\n  }\n  checkAndUpdateHouse(resdident) {\n    const houseNumberToCheck = resdident.personalCode;\n    this.houseService.doesResidentExistByNumber(houseNumberToCheck, resdident.apartmentId).subscribe(exists => {\n      if (exists) {\n        this.houseService.UpdateResident(this.residentdetails.id, this.residentdetails).subscribe({\n          next: response => {\n            this.closeModalAndRefresh();\n          }\n        });\n      } else if (!exists && this.isManager) {\n        this.houseService.CreateResident(this.residentdetails).subscribe({\n          next: createdHouse => {\n            this.closeModalAndRefresh();\n          }\n        });\n      }\n      this.closeModalAndRefresh();\n    });\n  }\n  Delete(resdidentid) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const result = _this.openConfirmationModal();\n      if (yield result) {\n        _this.deleteResident(resdidentid);\n      } else {}\n    })();\n  }\n  deleteResident(residentId) {\n    this.houseService.DeleteResident(residentId).subscribe({\n      next: response => {\n        this.closeModalAndRefresh();\n      }\n    });\n  }\n  openConfirmationModal() {\n    const modalRef = this.modalService.open(DeleteConfirmationModalComponent);\n    return modalRef.result.then(result => {\n      return result === true;\n    }).catch(() => {\n      return false;\n    });\n  }\n  closeModalAndRefresh() {\n    this.activeModal.close();\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => this.router.navigate(['apartments/' + this.residentdetails.apartmentId + '/residents']));\n  }\n};\n__decorate([ViewChild('editModal')], ApartmentComponent.prototype, \"editModal\", void 0);\nApartmentComponent = __decorate([Component({\n  selector: 'app-apartment',\n  templateUrl: './apartment.component.html',\n  styleUrls: ['./apartment.component.css']\n})], ApartmentComponent);\nexport { ApartmentComponent };","map":{"version":3,"names":["Component","ViewChild","ApartmentEditComponent","jwtDecode","DeleteConfirmationModalComponent","ApartmentComponent","constructor","activeModal","modalService","houseService","route","router","AuthorizeService","isManager","isResident","residents","apartmentdetails","id","number","floor","numberOfRooms","population","fullArea","livingSpace","houseId","residentdetails","name","surname","personalCode","dateOfBirth","Date","phone","email","isOwner","apartmentId","ngOnInit","manager","params","subscribe","getApartmentDetails","getApartmentsResidents","getUser","data","currentUser","getResidentDetails","residentId","GetResidentById","GetApartmentById","Apartmentid","GetApartmentsResident","openEditModal","open","editModal","next","response","openEditModalEditApartment","modalRef","componentInstance","getAccessToken","userRole","token","role","checkAndUpdateHouse","resdident","houseNumberToCheck","doesResidentExistByNumber","exists","UpdateResident","closeModalAndRefresh","CreateResident","createdHouse","Delete","resdidentid","_this","_asyncToGenerator","result","openConfirmationModal","deleteResident","DeleteResident","then","catch","close","navigateByUrl","skipLocationChange","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\VladislavMihailov\\source\\repos\\vladislavm-ui\\ClientApp\\src\\app\\apartment\\apartment.component.ts"],"sourcesContent":["\nimport { Apartment } from './../Models/apartment.model';\nimport { Resident } from './../Models/resident.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HomesApiService } from '../Services/homes-api.service';\nimport { FormGroup } from '@angular/forms';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { Component, OnInit, Inject, ViewChild, ElementRef } from '@angular/core';\nimport { ResdidentDetailComponent } from '../ModalLogs/resdident-detail/resdident-detail.component';\nimport { ApartmentEditComponent } from '../ModalLogs/apartment-edit/apartment-edit.component';\nimport { AuthorizeService, IUser } from 'src/api-authorization/authorize.service';\nimport jwtDecode from 'jwt-decode';\nimport { DeleteConfirmationModalComponent } from '../ModalLogs/delete-confirmation-modal/delete-confirmation-modal.component';\n\n\n@Component({\n  selector: 'app-apartment',\n  templateUrl: './apartment.component.html',\n  styleUrls: ['./apartment.component.css']\n})\n\n\n\n\nexport class ApartmentComponent implements OnInit {\n  @ViewChild('editModal') editModal!: ElementRef;\n  apartmentId!: number;\n  residentId!:number;\n  isManager: boolean = false;\n  isResident: boolean = false;\n  apartments!: Apartment ;\n  showEditForm!: boolean;\n  residents: Resident[] = [];\n  selectedResident!: Resident;\n  showEditModal!: boolean;\n  apartmentForm!: FormGroup;\n  currentUser: any;\n  apartmentdetails: Apartment = {\n    id: 0,\n    number: 0,\n    floor: 0,\n    numberOfRooms: 0,\n    population: 0,\n    fullArea: 0,\n    livingSpace: 0,\n    houseId: 0\n  }\n  residentdetails: Resident = {\n    id: 0,\n    name: '',\n    surname: '',\n    personalCode: '',\n    dateOfBirth: new Date(2000, 0, 1),\n    phone: '',\n    email: '',\n    isOwner: false,\n    apartmentId: 0\n  }\n  constructor(\n    public activeModal: NgbActiveModal,\n    public modalService: NgbModal,\n    private houseService: HomesApiService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private AuthorizeService: AuthorizeService,\n  ) { }\n\n  ngOnInit() {\n    this.manager();\n    this.route.params.subscribe(params => {\n      this.apartmentId = +params['id'];\n      this.getApartmentDetails(this.apartmentId);\n    });\n    this.getApartmentsResidents(this.apartmentId);\n    this.AuthorizeService.getUser().subscribe(data => {\n      if (data && data.name) {\n        this.currentUser = data.name;\n      }\n    });\n\n\n  }\n  getResidentDetails(residentId: number) {\n    return this.houseService.GetResidentById(residentId);\n  }\n  getApartmentDetails(apartmentId: number) {\n    return this.houseService.GetApartmentById(apartmentId);\n  }\n\n\n  getApartmentsResidents(Apartmentid: number) {\n    this.houseService.GetApartmentsResident(Apartmentid).subscribe(\n      (residents: Resident[]) => {\n        this.residents = residents;\n      },\n\n    );\n  }\n\n openEditModal(residentId: number) {\n    this.residentId = residentId;\n    this.modalService.open(this.editModal);\n    this.getResidentDetails(this.residentId).subscribe({\n    next: (response: Resident) => {\n      this.residentdetails = response;\n    }    \n  });\n  \n\n}\n  openEditModalEditApartment(apartmentId: number) {\n    const modalRef = this.modalService.open(ApartmentEditComponent);\n    modalRef.componentInstance.apartmentId = apartmentId;\n  }\n  manager(): void {\n    this.AuthorizeService.getAccessToken().subscribe((userRole: string | null) => {\n      if (userRole !== null) {\n        const token: any = jwtDecode(userRole);\n        const role = token.role;\n\n        this.isManager = role === 'Manager';\n        this.isResident = role === 'Resident';\n      } else {\n        this.isManager = false;\n        this.isResident = false;\n      }\n    });\n  }\n\n\n\n  checkAndUpdateHouse(resdident: Resident) {\n    const houseNumberToCheck = resdident.personalCode;\n    this.houseService.doesResidentExistByNumber(houseNumberToCheck, resdident.apartmentId).subscribe((exists) => {\n      if (exists) {\n        this.houseService.UpdateResident(this.residentdetails.id, this.residentdetails).subscribe({\n          next: (response) => {\n            this.closeModalAndRefresh();\n          }\n        });\n      } else if (!exists && this.isManager) {\n        this.houseService.CreateResident(this.residentdetails).subscribe({\n          next: (createdHouse) => {\n            this.closeModalAndRefresh();\n          }\n        });\n      }\n\n      this.closeModalAndRefresh();\n    });\n  }\n\n\n  async Delete(resdidentid: number) {\n    const result = this.openConfirmationModal();\n    if (await result) {\n      this.deleteResident(resdidentid)\n    } else {\n    }\n  }\n  deleteResident(residentId: number) {\n    this.houseService.DeleteResident(residentId).subscribe({\n      next: (response) => {\n        this.closeModalAndRefresh();\n      }\n    })\n  }\n  openConfirmationModal(): Promise<boolean> {\n    const modalRef: NgbModalRef = this.modalService.open(DeleteConfirmationModalComponent);\n\n    return modalRef.result.then((result) => {\n      return result === true;\n    }).catch(() => {\n      return false;\n    });\n  }\n\n  closeModalAndRefresh() {\n    this.activeModal.close();\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() =>\n      this.router.navigate(['apartments/' + this.residentdetails.apartmentId + '/residents']))\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}